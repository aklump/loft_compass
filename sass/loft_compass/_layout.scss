// THINGS TO NOTE
// 
// 1) Always place the following line at the top of a partial where you want
// to utilize a grid (after @import statements).
// 
//    $min: grid_init(24, 10px, $desktop);
//    
// this will insure that you are on the grid you're expecting

// 
// Global Vars & Default values
// 
// DO NOT change these defaults they are here only to declare the variable names
// and avoid throwing compilor errors. You should call grid_init() from
// within partials/layout (or somewhere else) and leave these alone.
// These defaults are required to be here for sass to compile correctly.
// 
$grid_columns: 24;
$grid_two_thirds: 16;
$grid_half: 12;
$grid_third: 8;
$grid_quarter: 6;
$grid_margin: 10px;
$grid_size: 950px;

// This is the extreme max for media queries
$media_max_top: 100000px;

//
//  STEP ONE: Define the devices.
//  
//  Make a list of your devices and their widths.  This list becomes your
//  device constants that are passed to functions.
//  
//  The width that you assign to the device variable will most likely be
//  the width it reports back as it the css pixel width of the device.  In some
//  cases, you may record a value smaller if your design for the target device
//  occupies less width than it's full width.
// 
// The width that is assigned should be the maximum design width for the
// intended device, it will only be the grid width, if the $margin size is 0.
// Otherwise the outer grid width will come from this value - $margin_size.
// 
// The values you assign here must be used as the second list value in
//  $_breakpoint...
//
// THIS IS A TEMPLATE AND SHOULD BE COPIED, NOT EDITED
//
// AFTER COPYING, YOU MAY SAFELY DELETE ANY VARIABLES THAT YOU DO NOT INTEND
//  TO USE.
//
// @type {px}
//
$mini:        240px;
$iphone_p:    320px;
$iphone4_l:   480px;
$iphone5_l:   568px;
$tablet_7:    600px;
$tablet_10:   720px;
$ipad_p:      768px;
$desktop:     1024px;
$desktop_w:   1280px;
$desktop_hd:  1920px;
$desktop_xw:  2560px;

// 
// STEP TWO: Define the breakpoints
// 
// 1. $_breakpoint1 is special, so set it to 0 {width of most narrow device}.
// 2. The next breakpoint is the screen width of your first device.
// 3. Each additional breakpoint is the screen width of your next device.
// 
// The second number is the outer grid width for that viewport; it comes from above.
// 
// How to think about this: When the screen is [value 1] wide, the grid
// should be [value 2] wide.  Start at the narrow widths first and work up.
// 
// As seen below we can say this: When the screen width is 960 pixels, the grid
// should be 960 pixels.  This is also true: when the screen width is between
// 769 pixels and 960 pixels, the grid will be 960 pixels.
// 
// In reality cols 1 and two will not always match.  This is dependent upon
// - gutter width
// - number of breakpoints
// - number of columns in the grid
// 
// There is support for 15 breakpoints, which is certainly overkill and 
// is not meant to be taken literally.  Instead you should redefine the
// breakpoints in a partial further down the chain than this one. 
// 
// THIS IS A TEMPLATE AND SHOULD BE COPIED, NOT EDITED
// 
// Here is an example of typical usage; for those breakpoints you will not
// be using you must set as $media_max_top $media_max_top.
// 
//   $_breakpoint1:    0 320px; 
//   $_breakpoint2:    320px 320px;
//   $_breakpoint3:    480px 474px;
//   $_breakpoint4:    768px 762px;
//   $_breakpoint5:    960px 960px;
//   $_breakpoint6:    $media_max_top $media_max_top;
//   $_breakpoint7:    $media_max_top $media_max_top;
//   $_breakpoint8:    $media_max_top $media_max_top;
//   $_breakpoint9:    $media_max_top $media_max_top;
//   $_breakpoint10:   $media_max_top $media_max_top;
//   $_breakpoint11:   $media_max_top $media_max_top;
//   $_breakpoint12:   $media_max_top $media_max_top;
//   $_breakpoint13:   $media_max_top $media_max_top;
//   $_breakpoint14:   $media_max_top $media_max_top;
//   $_breakpoint15:   $media_max_top $media_max_top;
// 
// http://developer.android.com/guide/practices/screens_support.html
// http://www.thegraphicmac.com/ios-device-screen-chart-for-developers
// 
// @type {px} {px}
// 
$_breakpoint1:   0 240px;
$_breakpoint2:   240px 240px;
$_breakpoint3:   320px 320px;
$_breakpoint4:   480px 480px;
$_breakpoint5:   568px 568px;
$_breakpoint6:   600px 600px;
$_breakpoint7:   720px 720px;
$_breakpoint8:   768px 768px;
$_breakpoint9:  1024px 1024px;
$_breakpoint10: 1280px 1280px;
$_breakpoint11: 1920px 1920px;
$_breakpoint12: 2560px 2560px;
$_breakpoint13: $media_max_top $media_max_top;
$_breakpoint14: $media_max_top $media_max_top;
$_breakpoint15: $media_max_top $media_max_top;

// 
// Reverse the effects of @include last
// 
@mixin unlast() {
  margin-right: $blueprint-grid-margin;
}

//
// Apply necessary media queries to target a single device:
// 
// Be aware this has to be called INSIDE a css declaration; the following will
// not work.  So media queries are still necessary.
// 
// @code
//   @include target_device($desktop) {
//     .some-class {
//       display: block;
//       background-color: #073A70; 
//     }   
//   }
// @endcode
// 
// @param {px} $device A device constant.
// 
// @code
//   .desktop {
//     @include target_device($desktop) {
//       display: block;
//       background-color: #073A70;    
//     }
//   }
// @endcode
// 
// The above is shorthand for:
// @code
//   $min: grid_media_min($desktop);
//   $max: grid_media_max($desktop);
//   @media screen and (min-width: $min) and (max-width: $max) {
//     .desktop {
//       display: block;
//       background-color: #073A70; 
//     }
//   }
// @endcode
// 
// This is inspired by http://breakpoint-sass.com/
// 
@mixin target_device($device) {
  $min: grid_media_min($device);
  $max: grid_media_max($device);
  @if $min == 0 {
    @if $max == $media_max_top {
      @media screen {
        @content;
      }          
    }
    @else {
      @media screen and (max-width: $max) {
        @content;
      }
    }
  }
  @elseif ($max + 1px) == $media_max_top {
    @if $min == 0 {
      @media screen {
        @content;
      }
    }        
    @else {
      @media screen and (min-width: $min) {
        @content;
      }        
    }
  }
  @else {
    @media screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
}

// 
// Initialize a grid
// 
// PUT THIS AT THE TOP OF EACH PARTIAL WHERE YOU WILL BE USING grid_set_width()
// 
// @param int $columns
//   Total number of columns
// @param int $margin
//   Total margin between columns, e.g. 10px
// @param int $size
//   The total width for this grid to occupy, e.g. 960px
//   E.g. 24 column grid will equal 950 pixels with 5px on left and right. And
//   10px between each column. Initialize said grid as in the code example below.
// 
// @return
//   The value of $size + $grid_margin; use for min-width: in media queries
// 
// Call this like such:
// @code
// $width: grid_init(24, 10px, 960px);
// $prev_width: $width;
// @endcode
// 
// This function usually need only be called once.
// 
// These vars are made available
// - $grid_columns: total column count
// - $grid_margin: margin between columns
// - $grid_width: width of a single column
// - $grid_size: total of all columns, less left/right margins
// - $grid_half: column count for 1/2 width
// - $grid_third: column count for 1/3 width
// - $grid_quarter: column count for 1/4 width
// 
// @see grid_width()
// 
@function grid_init($columns, $margin, $size) {

  // Assign the values to our shorter, underscored vars, yet pass the vars into
  // blueprint as well...
  $grid_initial_width: $size;

  $grid_columns: $columns;
  $blueprint-grid-columns: $columns;

  $grid_margin: $margin;
  $blueprint-grid-margin: $margin;

  $grid_size: $size;
  $blueprint-container-size: $size;

  $grid_half: floor($grid_columns / 2);
  $grid_third: floor($grid_columns / 3);
  $grid_quarter: floor($grid_columns / 4);

  @return grid_set_width($grid_size);
}

// 
// Set the grid width, keeping the other elements the same as grid_init()
// 
// This should only be called AFTER grid_init. You need to call these in the
// order of widest to most narrow if you are using the $width/$prev_width
// design as described below.  This needs to be called anytime
// you are going to do media queries based on a new width. This should be the
// total width you want to occupy, $grid_margin will be deducted from $size to
// determine $grid_size.
// 
// @param $size
//   e.g. 768px, 960px, etc.
// 
// @return int The number to use a min-value in a media query for this
// 
// @see grid_media_min()
// @see grid_media_max()
// 
// Call this like such:
// @code
//   $width: grid_set_width($desktop);
//   // ... add some css for desktop width
//   
//   $min: grid_set_width($ipad_p);
//   $max_width: grid_media_max($ipad_p);
//   @media screen and (min-width: $min_width) and (max-width: $max_width) {
//     // ... now add some css for tablet portrait
//   }

//   // ... and so forth down the line for your width vars: wide to narrow
// @endcode
// 
// Call this just before declaring media queries on a new viewport
// 
@function grid_set_width($size) {

  // Assign the values to our shorter, underscored vars, yet pass the vars into
  // blueprint as well...

  // The width of all columns less left/right margins
  $grid_size: $size - $grid_margin;
  $blueprint-container-size: $grid_size;

  // The width of each grid
  $grid_width: ($grid_size + $grid_margin) / $grid_columns - $grid_margin;
  $blueprint-grid-width: $grid_width;

  $blueprint-grid-outer-width: $blueprint-grid-width + $blueprint-grid-margin;

  @return grid_media_min($size);
}

// 
// Returns the value to use in min-width media queries for a px value
// 
// @param  {px} $width
// 
// @return {px}
// 
@function grid_media_min($device) {
  @if $device <= nth($_breakpoint1, 2) {
    // Hardcoded as 0px
    @return 0px;
  }
  @elseif $device <= nth($_breakpoint2, 2) {
     @return nth($_breakpoint2, 1);
  }
  @elseif $device <= nth($_breakpoint3, 2) {
    @return nth($_breakpoint3, 1);
  }
  @elseif $device <= nth($_breakpoint4, 2) {
    @return nth($_breakpoint4, 1);
  }
  @elseif $device <= nth($_breakpoint5, 2) {
    @return nth($_breakpoint5, 1);
  }
  @elseif $device <= nth($_breakpoint6, 2) {
    @return nth($_breakpoint6, 1);
  }
  @elseif $device <= nth($_breakpoint7, 2) {
    @return nth($_breakpoint7, 1);
  }
  @elseif $device <= nth($_breakpoint8, 2) {
    @return nth($_breakpoint8, 1);
  }
  @elseif $device <= nth($_breakpoint9, 2) {
    @return nth($_breakpoint9, 1);
  }
  @elseif $device <= nth($_breakpoint10, 2) {
    @return nth($_breakpoint10, 1);
  }
  @elseif $device <= nth($_breakpoint11, 2) {
    @return nth($_breakpoint11, 1);
  }
  @elseif $device <= nth($_breakpoint12, 2) {
    @return nth($_breakpoint12, 1);
  }
  @elseif $device <= nth($_breakpoint13, 2) {
    @return nth($_breakpoint13, 1);
  }
  @elseif $device <= nth($_breakpoint14, 2) {
    @return nth($_breakpoint14, 1);
  }
  @else {
    @return nth($_breakpoint15, 1);
  }
}

// 
// Returns the value to use in max-width media queries for a px value
// 
// @param  {px} $width
// 
// @return {px}
// 
@function grid_media_max($device) {
  @if $device >= nth($_breakpoint15, 2) {
    // hardcoded as upper extreme $media_max_top
    @return $media_max_top;
  }
  @elseif $device >= nth($_breakpoint14, 2) {
    @return nth($_breakpoint15, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint13, 2) {
    @return nth($_breakpoint14, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint12, 2) {
    @return nth($_breakpoint13, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint11, 2) {
    @return nth($_breakpoint12, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint10, 2) {
    @return nth($_breakpoint11, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint9, 2) {
    @return nth($_breakpoint10, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint8, 2) {
    @return nth($_breakpoint9, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint7, 2) {
    @return nth($_breakpoint8, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint6, 2) {
    @return nth($_breakpoint7, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint5, 2) {
    @return nth($_breakpoint6, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint4, 2) {
    @return nth($_breakpoint5, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint3, 2) {
    @return nth($_breakpoint4, 1) - 1px;
  }
  @elseif $device >= nth($_breakpoint2, 2) {
    @return nth($_breakpoint3, 1) - 1px;
  }
  @else {
    @return nth($_breakpoint2, 1) - 1px;
  }
}

//
// Return the full viewport width for a given device
// 
// @param {px}
// 
// @return {px}
// 
@function viewport_get_width($device) {
  @if $device >= nth($_breakpoint15, 2) {
    @return nth($_breakpoint15, 1);
  }
  @elseif $device >= nth($_breakpoint14, 2) {
    @return nth($_breakpoint14, 1);
  }
  @elseif $device >= nth($_breakpoint13, 2) {
    @return nth($_breakpoint13, 1);
  }
  @elseif $device >= nth($_breakpoint12, 2) {
    @return nth($_breakpoint12, 1);
  }
  @elseif $device >= nth($_breakpoint11, 2) {
    @return nth($_breakpoint11, 1);
  }
  @elseif $device >= nth($_breakpoint10, 2) {
    @return nth($_breakpoint10, 1);
  }
  @elseif $device >= nth($_breakpoint9, 2) {
    @return nth($_breakpoint9, 1);
  }
  @elseif $device >= nth($_breakpoint8, 2) {
    @return nth($_breakpoint8, 1);
  }
  @elseif $device >= nth($_breakpoint7, 2) {
    @return nth($_breakpoint7, 1);
  }
  @elseif $device >= nth($_breakpoint6, 2) {
    @return nth($_breakpoint6, 1);
  }
  @elseif $device >= nth($_breakpoint5, 2) {
    @return nth($_breakpoint5, 1);
  }
  @elseif $device >= nth($_breakpoint4, 2) {
    @return nth($_breakpoint4, 1);
  }
  @elseif $device >= nth($_breakpoint3, 2) {
    @return nth($_breakpoint3, 1);
  }
  @elseif $device >= nth($_breakpoint2, 2) {
    @return nth($_breakpoint2, 1);
  }
  @elseif $device >= nth($_breakpoint1, 2) {
    @return nth($_breakpoint1, 1);
  }
}