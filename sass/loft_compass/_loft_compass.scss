//
// Defines the media query for determining if this is a retina display.
$retina: "(-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx)";


//
// Sets the default suffix to be used for retina stuff.  Some convention
// uses @2x, but this seems like a bad idea for at least two reasons:
// 
// 1. sprite candidates cannot be named using '@'
// 2. '@' for a filename should be reserved for the user part of an url.
// 
$retina_suffix: '-2x' !default;

// 
// Due to a requirement that sprites cannot contain the char '@', the retina
// suffix $retina_suffix uses -2x instead of @2x.
// 

// Uncomment this next line after you create 'retinat_sprite/' with one or more
// image files in there.
//$sprite_map_retina: sprite-map("retina_sprite/*.png", $layout: smart, $sprite-dimensions: true) !default;

$sprite_hover_suffix: '_hover' !default;

// 
// Output font-size (and line-height) in rem with px fallback
// 
// @param $size
//   rem and px: will be converted to rem with px fallback
//   % and em will pass through without conversion
//   vw and vh: you will need to send a fallback value like this:
//   font_size(14.125vw 22px, ...);
// @param $line_height
//   Optional, behaves same as $size
// 
$font_size_root_element: 16px !default;
@mixin font_size($size, $line_height: false, $important: false){
  $_rem_ratio: $font_size_root_element / 1rem;

  $_fallback: "";
  @if type-of($size) == list {
    $_fallback: nth($size, 2);
    $size: nth($size, 1);
  }

  $unit: unit($size);
  
  @if $important {
    @if $unit == 'rem' {
      font-size: $size * $_rem_ratio !important;
      font-size: $size !important;
    }
    @else if $unit == 'px' {
      font-size: $size !important;
      font-size: $size / $_rem_ratio !important;
    }
    @else if $unit == 'vw' or $unit == 'vh' {
      @if $_fallback == "" {
        @error "vm or vh units must have a fallback"
      }      
      @include font_size($_fallback, $line_height, $important);
      font-size: $size  !important;
    }
    @else {
      font-size: $size !important;
    }    
  }
  @else {
    @if $unit == 'rem' {
      font-size: $size * $_rem_ratio;
      font-size: $size;
    }
    @else if $unit == 'px' {
      font-size: $size;
      font-size: $size / $_rem_ratio;
    }
    @else if $unit == 'vw' or $unit == 'vh' {
      @if $_fallback == "" {
        @error "vm or vh units must have a fallback"
      }
      @include font_size($_fallback);
      font-size: $size;
    }    
    @else {
      font-size: $size;
    }    
  }

  @if $line_height {
    $unit: unit($line_height);
    @if $important {
      @if $unit == 'rem' {
        line-height: $line_height * $_rem_ratio !important;
        line-height: $line_height !important;
      }
      @else if $unit == 'px' {
        line-height: $line_height !important;
        line-height: $line_height / $_rem_ratio !important;
      }
      @else {
        line-height: $line_height !important;
      }
    }
    @else {
      @if $unit == 'rem' {
        line-height: $line_height * $_rem_ratio;
        line-height: $line_height;
      }
      @else if $unit == 'px' {
        line-height: $line_height;
        line-height: $line_height / $_rem_ratio;
      }
      @else {
        line-height: $line_height;
      }      
    }
  }
}

// 
// Convert rem to pixels
// 
// @param mixed $rem
// 
// @return mixed
// 
@function rem_px($rem) {
  $rem_ratio: 16px / 1rem;
  @return $rem * $rem_ratio;
}

//
// A mixin to make an img responsive.
// 
// Will not grow beyond native width of image unless you specify $full = true.
// 
@mixin responsive_img($full: false) {
  height: auto;
  vertical-align: bottom;
  display: block;
  margin: auto;
  @if $full == true {
    max-width: auto;
    width: 100%;    
  }
  @else {
    max-width: 100%;
    width: auto;    
  }
}

//
// Generates the CSS needed for a background image with retina support.
// 
// If the image is called 'select-bg.png' then we're expecting another retina
// image with the exact same aspect ratio, twice the size under the filename
// 'select-bg@2x.png'.
// 
// @param $filename string The filename of the low res bg image, without ext.
// @param $ext string The extension of the bg file without the '.'.
// 
// @see $retina_suffix
// 
@mixin retina_background($filename, $ext) {
  background-image: image_url($filename + '.' + $ext);
  $height: image-height($filename + '.' + $ext);
  $width: image-width($filename + '.' + $ext);
  @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx) {
      background-image: image_url($filename + $retina_suffix + '.' + $ext);
      background-size: $width $height;
  }  
}

//
// Generates the CSS for a retina sprite.
// 
// @param $sprite string The filename of the sprite, less extension.
// @param $sprite_map string Optional, defaults to $sprite_map_retina.  Pass
//   an alternate sprite map if desired.
//   
// Place sprite candidates into images/retina_sprites/*.png and use the
// following for the high def images/retina_sprites/*-2x.png.
// 
// @see $sprite_map_retina
// @see $retina_suffix
// 
@mixin retina_sprite($sprite, $sprite-map: $sprite_map_retina) {
  $sprite-high-res: #{$sprite}#{$retina_suffix};
  background-image: sprite-url($sprite-map);
  background-position: sprite-position($sprite-map, $sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  height: image-height(sprite-file($sprite-map, $sprite));
  width: image-width(sprite-file($sprite-map, $sprite));
  
  @if sprite_has_selector($sprite-map, $sprite, hover){
    &:hover {
      $sprite-hover: #{$sprite}#{$sprite_hover_suffix};
      background-position: sprite-position($sprite-map, $sprite-hover);
    }
  }

  @media #{$retina} {
    background-size: (image-width(sprite-path($sprite-map)) / 2) (image-height(sprite-path($sprite-map)) / 2);
    background-position: round(nth(sprite-position($sprite-map, $sprite-high-res), 1) / 2) round(nth(sprite-position($sprite-map, $sprite-high-res), 2) / 2);
    height: image-height(sprite-file($sprite-map, $sprite));
    width: image-width(sprite-file($sprite-map, $sprite));

    @if sprite_has_selector($sprite-map, $sprite-high-res, hover){
      &:hover {
        $sprite-high-res-hover: #{$sprite-high-res}#{$sprite_hover_suffix};
        background-position: sprite-position($sprite-high-res-map, $sprite-hover);
      }
    }        
  }
}

//
// Sets the padding for left and right to the same.
// 
// @param mixed $padding
// 
@mixin hpadding($padding) {
  padding-left: $padding;
  padding-right: $padding;
}

//
// Sets the padding for top and bottom to the same.
// 
// @param mixed $padding
// 
@mixin vpadding($padding) {
  padding-top: $padding;
  padding-bottom: $padding;
}

//
// Sets the margin for left and right to the same.
// 
// @param mixed $margin
// 
@mixin hmargin($margin) {
  margin-left: $margin;
  margin-right: $margin;
}

//
// Sets the margin for top and bottom to the same.
// 
// @param mixed $margin
// 
@mixin vmargin($margin) {
  margin-top: $margin;
  margin-bottom: $margin;
}

@mixin center() {
  display: block;
  text-align: center;
  margin-left: auto;
  margin-right: auto;  
}

//
// Apply height/width to an element to maintain an aspect ratio.
// 
// The element should have a direct child with the class .inner
// 
// @code 
//   <div class="parent"><div class="inner"></div></div>
// 
//   .parent {
//     @include aspect_ratio(4, 3);
//   }
// @endcode
// 
// @param number $x May be a ratio like .65 or the x value of a ratio, e.g. 4
// @param number $y Optional Use if passing a ratio as two numbers; the y value.
//
@mixin aspect_ratio($x, $y: "") {
  $ratio: $x;
  @if $y != "" {
    $ratio: $y / $x;  
  }
  width: 100%;
  position: relative;
  height: 0;
  padding: $ratio * 100% 0 0 0;
  overflow: hidden;

  &>.inner {
    @include aspect_ratio_inner; 
  }
}

//
//
// Helper to 'aspect_ratio', if .inner is not a direct child or is called
// something other than .inner
//
@mixin aspect_ratio_inner() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;   
}

//
// Convert pixels to inches
// 
// @param float $inches
// 
// @return float The value in pixels.
// 
$inches_to_px_dpi: 96 !default;
@function inches_to_px($inches) {
  @return ($inches * $inches_to_px_dpi) * 1px;
}
